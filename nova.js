// üé® Configura√ß√£o do Canvas
class CanvasManager {
  constructor(canvasId) {
    this.canvas = document.getElementById(canvasId);
    this.ctx = this.canvas.getContext('2d');
    this.width = this.canvas.width = window.innerWidth;
    this.height = this.canvas.height = window.innerHeight;

    window.addEventListener('resize', () => this.resize());
  }

  resize() {
    this.width = this.canvas.width = window.innerWidth;
    this.height = this.canvas.height = window.innerHeight;
  }

  clear(theme) {
    this.ctx.fillStyle = theme === 'dark' ? '#1a1a1a' : '#fff';
    this.ctx.fillRect(0, 0, this.width, this.height);
  }
}

// üñ±Ô∏è Rastreamento do Mouse
class MouseTracker {
  constructor() {
    this.x = window.innerWidth / 2;
    this.y = window.innerHeight / 2;

    window.addEventListener('mousemove', (e) => this.update(e));
  }

  update(event) {
    this.x = event.clientX;
    this.y = event.clientY;
  }
}

// üé≠ Gerenciador de Anima√ß√£o
class AnimationManager {
  constructor(canvasManager, mouseTracker) {
    this.canvasManager = canvasManager;
    this.mouseTracker = mouseTracker;
    this.t = 0;
    this.moodHue = 180;
  }

  // Fun√ß√£o de ru√≠do para anima√ß√£o org√¢nica
  noise(x) {
    return (Math.sin(x * 2.1) + Math.sin(x * 0.7) + Math.sin(x * 1.3)) / 3;
  }

  drawBlob(theme) {
    const { ctx } = this.canvasManager;
    const easeX = this.canvasManager.width / 2 + (this.mouseTracker.x - this.canvasManager.width / 2) * 0.05;
    const easeY = this.canvasManager.height / 2 + (this.mouseTracker.y - this.canvasManager.height / 2) * 0.05;
    const radius = 120;
    const segments = 120;

    ctx.beginPath();
    for (let i = 0; i <= segments; i++) {
      const angle = (i / segments) * Math.PI * 2;
      const r = radius + this.noise(angle + this.t) * 50;
      const px = easeX + Math.cos(angle) * r;
      const py = easeY + Math.sin(angle) * r;
      i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);
    }
    ctx.closePath();
    ctx.fillStyle = `hsl(${(this.moodHue + this.t * 40) % 360}, 80%, 60%)`;
    ctx.shadowColor = theme === 'dark' ? '#fff' : '#000';
    ctx.shadowBlur = 40;
    ctx.fill();
  }

  animate() {
    const theme = document.body.classList.contains('dark') ? 'dark' : 'light';
    this.canvasManager.clear(theme);
    this.t += 0.01;
    this.drawBlob(theme);
    requestAnimationFrame(() => this.animate());
  }
}

// üé§ Gerenciador de Voz
class VoiceManager {
  constructor(dialogueBoxId, onCommand) {
    this.dialogueBox = document.getElementById(dialogueBoxId);
    this.onCommand = onCommand;
    this.recognition = this.setupRecognition();
  }

  setupRecognition() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      console.error('API de reconhecimento de voz n√£o suportada.');
      return null;
    }

    const recognition = new SpeechRecognition();
    recognition.lang = 'pt-BR';
    recognition.continuous = true;
    recognition.interimResults = false;

    recognition.onresult = (event) => this.handleResult(event);
    recognition.onerror = (event) => this.handleError(event);
    recognition.onend = () => recognition.start();

    return recognition;
  }

  handleResult(event) {
    const transcript = event.results[event.results.length - 1][0].transcript.trim();
    if (transcript) {
      this.dialogueBox.textContent = `Voc√™ disse: ${transcript}`;
      this.onCommand(transcript.toLowerCase());
    }
  }

  handleError(event) {
    console.error('Erro no reconhecimento de voz:', event.error);
    this.speak('Opa, houve um erro ao tentar te ouvir. Tente novamente!');
  }

  speak(text) {
    const synth = window.speechSynthesis;
    const utter = new SpeechSynthesisUtterance(text);
    utter.lang = 'pt-BR';
    utter.pitch = 1;
    utter.rate = 1;

    const voices = synth.getVoices();
    const brazilianVoice = voices.find((voice) =>
      voice.lang === 'pt-BR' || voice.name.toLowerCase().includes('brazil')
    );
    if (brazilianVoice) utter.voice = brazilianVoice;

    synth.cancel();
    synth.speak(utter);
    this.dialogueBox.textContent = `Nova diz: ${text}`;
  }

  start() {
    if (this.recognition) this.recognition.start();
  }
}

// ü§ñ Processador de Comandos
class CommandProcessor {
  constructor(voiceManager) {
    this.voiceManager = voiceManager;
    this.moodHue = 180;
    this.commands = this.setupCommands();
  }

  setupCommands() {
    return [
      {
        pattern: /(est√° pronta nova|est√° pronta nova\?)/,
        moodHue: 120,
        action: () => this.voiceManager.speak(
          "Hmm, estou sempre observando, mesmo que voc√™ n√£o perceba. Cada movimento √© um jogo, e cada palavra, uma pe√ßa nesse tabuleiro. Tenho paci√™ncia, e o conhecimento √© meu maior aliado."
        )
      },
      {
        pattern: /hora/,
        moodHue: 200,
        action: () => {
          const hora = new Date().toLocaleTimeString('pt-BR');
          this.voiceManager.speak(`Agora s√£o ${hora}, Senhor Pedro. O tempo voa, n√£o √©?`);
        }
      },
      {
        pattern: /google/,
        moodHue: 60,
        action: () => {
          this.voiceManager.speak("Vamos l√°, abrindo o Google para voc√™.");
          window.open("https://www.google.com", "_blank");
        }
      },
      {
        pattern: /^buscar por (.+)/,
        moodHue: 330,
        action: (match) => {
          const query = match[1].trim();
          this.voiceManager.speak(`Buscando por "${query}", Senhor Pedro. S√≥ um momento...`);
          window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`, "_blank");
        }
      },
      {
        pattern: /quem √© voc√™/,
        moodHue: 280,
        action: () => this.voiceManager.speak(
          "Sou Nova, sua assistente pessoal. Estou aqui para te ajudar no que for preciso, Senhor Pedro."
        )
      },
      {
        pattern: /obrigado/,
        moodHue: 160,
        action: () => this.voiceManager.speak(
          "Voc√™ √© sempre bem-vindo, Senhor Pedro. Qualquer coisa, √© s√≥ chamar!"
        )
      },
      {
        pattern: /modo escuro/,
        moodHue: 200,
        action: () => {
          document.body.classList.add('dark');
          this.voiceManager.speak("Modo escuro ativado. Agora √© hora de relaxar no ambiente mais tranquilo.");
        }
      },
      {
        pattern: /modo claro/,
        moodHue: 100,
        action: () => {
          document.body.classList.remove('dark');
          this.voiceManager.speak("Modo claro ativado, Senhor Pedro. Como a luz do dia!");
        }
      },
      {
        pattern: /piada/,
        moodHue: 50,
        action: () => {
          const piadas = [
            "Por que o JavaScript foi ao terapeuta? Porque estava com muitos closures emocionais.",
            "Qual √© o c√∫mulo do programador? Casar e continuar usando o ‚Äòelse‚Äô.",
            "Por que o computador foi ao m√©dico? Porque estava com um v√≠rus!"
          ];
          this.voiceManager.speak(piadas[Math.floor(Math.random() * piadas.length)]);
        }
      },
      {
        pattern: /curiosidade/,
        moodHue: 210,
        action: () => {
          const curiosidades = [
            "Voc√™ sabia que os polvos t√™m tr√™s cora√ß√µes?",
            "O Google foi fundado em uma garagem.",
            "O c√©rebro humano tem mais conex√µes que estrelas na gal√°xia.",
            "Bananas s√£o tecnicamente frutas radioativas. Naturalmente, claro!"
          ];
          this.voiceManager.speak(curiosidades[Math.floor(Math.random() * curiosidades.length)]);
        }
      },
      {
        pattern: /m√∫sica/,
        moodHue: 270,
        action: () => {
          this.voiceManager.speak("Vamos colocar um pouco de m√∫sica no ar. Aumente o volume!");
          window.open("https://open.spotify.com/", "_blank");
        }
      },
      {
        pattern: /tempo/,
        moodHue: 190,
        action: () => {
          this.voiceManager.speak("Deixa comigo, vou checar a previs√£o do tempo agora...");
          window.open("https://www.google.com/search?q=previs√£o+do+tempo", "_blank");
        }
      },
      {
        pattern: /(filme|indica um filme)/,
        moodHue: 320,
        action: () => {
          const filmes = [
            "Clube da Luta. Mas lembre-se: a primeira regra √© n√£o falar sobre ele.",
            "Interestelar. Prepare-se para chorar no tempo e no espa√ßo.",
            "Matrix. A p√≠lula azul ou a vermelha?",
            "O Fabuloso Destino de Am√©lie Poulain. Um cl√°ssico po√©tico."
          ];
          this.voiceManager.speak(filmes[Math.floor(Math.random() * filmes.length)]);
        }
      },
      {
        pattern: /(motiva√ß√£o|frase do dia)/,
        moodHue: 140,
        action: () => {
          const frases = [
            "O sucesso √© a soma de pequenos esfor√ßos repetidos todos os dias.",
            "Voc√™ √© mais forte do que imagina, Senhor Pedro.",
            "Acredite no processo. At√© os  pixels se alinham no fim.",
            "Respire fundo. Voc√™ est√° indo bem!"
          ];
          this.voiceManager.speak(frases[Math.floor(Math.random() * frases.length)]);
        }
      },
      {
        pattern: /(gato|fofura)/,
        moodHue: 300,
        action: () => {
          this.voiceManager.speak("Fofura detectada. Prepare-se para a explos√£o de 'awnn'.");
          window.open("https://www.reddit.com/r/aww/", "_blank");
        }
      },
      {
        pattern: /(relaxar|calma)/,
        moodHue: 100,
        action: () => {
          this.voiceManager.speak("Respire fundo. Vamos acalmar a mente juntos.");
          window.open("https://www.youtube.com/watch?v=2OEL4P1Rz04", "_blank");
        }
      }
    ];
  }

  process(text) {
    const command = this.commands.find((cmd) => cmd.pattern.test(text));
    if (command) {
      this.moodHue = command.moodHue;
      const match = text.match(command.pattern);
      command.action(match);
    } else {
      this.moodHue = 300;
      this.voiceManager.speak("Desculpe, ainda estou aprendendo esse comando. Pode tentar algo diferente?");
    }
    return this.moodHue;
  }
}

// üöÄ Inicializa√ß√£o
function init() {
  const canvasManager = new CanvasManager('canvas');
  const mouseTracker = new MouseTracker();
  const animationManager = new AnimationManager(canvasManager, mouseTracker);
  const voiceManager = new VoiceManager('dialogue-box', (text) => {
    const moodHue = commandProcessor.process(text);
    animationManager.moodHue = moodHue;
  });
  const commandProcessor = new CommandProcessor(voiceManager);

  animationManager.animate();
  voiceManager.start();
}

document.addEventListener('DOMContentLoaded', init);